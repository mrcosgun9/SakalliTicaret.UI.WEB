@model SakalliTicaret.Core.Model.Entity.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Panel/Views/Shared/_Layout.cshtml";
}
<div class="col-12">
    <div class="card">
        @using (Html.BeginForm("Edit", "Products", FormMethod.Post,
                new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @ViewBag.hata
            <div class="form-horizontal">
                <h4>Ürün Ekle</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label" })<br />

                            <input type="file" name="ProductImg" accept="image/*" />
                            @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <a target="_blank" href="/Panel/Products/MultipleImageUpload/@Model.Id" title="Toplu Resim Girişi" class="link"><i class="fa fa-file-image-o"></i>Toplu Resim Listesi/Girişi</a> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Definition, htmlAttributes: new { @class = "control-label" })

                        @Html.TextAreaFor(model => model.Definition, new { @id = "editor1" })
                        @Html.ValidationMessageFor(model => model.Definition, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">

                            @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownList("CategoryId", null, "Kategori Seçiniz", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-12" id="categoryProp">


                    </div>
                </div>
                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label" })

                            <div class="checkbox">
                                @Html.CheckBoxFor(model => model.IsActive, new { @checked = "checked" })
                                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(model=>model.CreateDateTime)



                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Düzenle" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Ürün Listesi", "Index")
        </div>
    </div>
</div>
@section scripts{
    <script>

        $(function () {
            var cId = $("#CategoryId").children("option").filter(":selected").val();
            $.ajax({
                type: "POST",
                url: "@Url.Action("CategoryPropertyGet", "Products", new { area = "Panel" })",
                data: '{id: "' + cId + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $('#categoryProp').html(response);

                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
        $("#CategoryId").on('change', function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("CategoryPropertyGet", "Products", new { area = "Panel" })",
                data: '{id: "' + this.value + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $('#categoryProp').html(response);

                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
            //$.ajax({
            //    type: "GET",
            //    url: "/Products/CategoryPropertyGet",
            //    contentType: 'application/json; charset=utf-8',
            //    dataType: 'json',
            //    traditional: true,
            //    data: {
            //        id: this.value
            //    },
            //    success: function myfunction(veri) {
            //        $("#categoryProp").html(veri);

            //    },
            //    error: function myfunction() {
            //        alert("hata");
            //    }
            //});
            //$.ajax({
            //    type: "POST",
            //    url: "CategoryPropertyGet",
            //    data: {
            //        id: this.value
            //    },
            //    dataType: 'json',
            //    contentType: 'application/json; charset=utf-8',
            //    success: function (data) {
            //        console.log(data);
            //    },
            //    error: function myfunction() {
            //        console.log("hata");
            //    }
            //});

        });


    </script>
}